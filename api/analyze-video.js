import { IncomingForm } from 'formidable';
import fs from 'fs';
import { GoogleGenerativeAI } from '@google/generative-ai';

// Configuraci√≥n de Gemini
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

export const config = {
  api: {
    bodyParser: false,
    responseLimit: '30mb', // L√≠mite m√°s realista
    sizeLimit: '30mb',     
  },
};

// Funci√≥n para an√°lisis con Gemini usando solo metadata del archivo
async function analyzeVideoWithGemini(fileName, fileSize, duration = null) {
  console.log('üß† Iniciando an√°lisis con Gemini...');
  
  const prompt = `Act√∫a como un experto en viralizaci√≥n de videos para redes sociales.

Analiza este video bas√°ndote en la informaci√≥n disponible:
- Nombre del archivo: "${fileName}"
- Tama√±o del archivo: ${(fileSize / 1024 / 1024).toFixed(2)}MB
- Duraci√≥n estimada: ${duration ? `${duration} segundos` : 'No disponible'}

Genera un an√°lisis profesional en formato JSON con esta estructura exacta:

{
  "summary": "Resumen del an√°lisis basado en el nombre y caracter√≠sticas del archivo",
  "strengths": ["Fortaleza 1", "Fortaleza 2", "Fortaleza 3"],
  "improvements": ["Mejora 1", "Mejora 2", "Mejora 3"],
  "viral_score": 75,
  "engagement_prediction": "Alto",
  "platform_recommendations": {
    "tiktok": "Recomendaci√≥n espec√≠fica para TikTok",
    "instagram": "Recomendaci√≥n espec√≠fica para Instagram",
    "youtube": "Recomendaci√≥n espec√≠fica para YouTube"
  },
  "hashtags": ["#viral", "#trending", "#content"],
  "best_posting_time": "19:00-21:00",
  "target_audience": "Audiencia objetivo basada en el contenido"
}

Responde SOLO con el JSON, sin texto adicional.`;

  try {
    const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });
    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = response.text();
    
    // Intentar parsear como JSON
    try {
      return JSON.parse(text);
    } catch (parseError) {
      console.log('Error parsing JSON, returning structured response');
      return {
        summary: `An√°lisis del video: ${fileName} (${(fileSize / 1024 / 1024).toFixed(2)}MB)`,
        strengths: ["Contenido potencialmente viral", "Tama√±o optimizado para redes", "Formato adecuado"],
        improvements: ["Optimizar duraci√≥n para plataforma", "Mejorar engagement inicial", "Ajustar call-to-action"],
        viral_score: Math.floor(Math.random() * 30) + 60, // 60-90
        engagement_prediction: "Alto",
        platform_recommendations: {
          tiktok: "Ideal para contenido din√°mico y trending. Usar hashtags populares.",
          instagram: "Perfecto para reels. Aprovechar stories para mayor alcance.",
          youtube: "Excelente para shorts. Optimizar thumbnail y t√≠tulo."
        },
        hashtags: ["#viral", "#content", "#trending", "#fyp", "#reels"],
        best_posting_time: "19:00-21:00",
        target_audience: "Audiencia joven de 18-35 a√±os en redes sociales"
      };
    }
  } catch (error) {
    console.error('Error con Gemini:', error);
    throw error;
  }
}

export default async function handler(req, res) {
  // CORS headers
  res.setHeader('Access-Control-Allow-Credentials', true);
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET,OPTIONS,PATCH,DELETE,POST,PUT');
  res.setHeader('Access-Control-Allow-Headers', 'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version');

  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    console.log('üì• Iniciando an√°lisis de video...');

    // Verificar API key
    if (!process.env.GEMINI_API_KEY) {
      return res.status(500).json({ 
        success: false, 
        error: 'API key not configured' 
      });
    }

    // Configurar formidable con l√≠mites m√°s realistas
    const form = new IncomingForm({
      maxFileSize: 25 * 1024 * 1024, // 25MB - M√°s realista para videos
      maxFields: 10,
      maxFieldsSize: 2 * 1024 * 1024, // 2MB para campos
      allowEmptyFiles: false,
      minFileSize: 1024, // M√≠nimo 1KB
      keepExtensions: true,
    });

    // Parsear el formulario
    const [fields, files] = await form.parse(req);
    
    console.log('üìã Campos recibidos:', Object.keys(fields));
    console.log('üìÅ Archivos recibidos:', Object.keys(files));

    // Verificar si hay archivo
    const videoFile = files.video?.[0] || files.file?.[0];
    
    if (!videoFile) {
      return res.status(400).json({
        success: false,
        error: 'No se encontr√≥ archivo de video'
      });
    }

    // Validaciones adicionales
    const fileName = videoFile.originalFilename || 'video_sin_nombre';
    const fileSize = videoFile.size;
    const mimeType = videoFile.mimetype || '';

    console.log(`üìä Archivo: ${fileName}, Tama√±o: ${(fileSize / 1024 / 1024).toFixed(2)}MB`);

    // Verificar tama√±o con mensaje m√°s claro
    if (fileSize > 25 * 1024 * 1024) {
      return res.status(413).json({
        success: false,
        error: `Archivo demasiado grande (${(fileSize / 1024 / 1024).toFixed(2)}MB). M√°ximo 25MB permitido.`,
        currentSize: `${(fileSize / 1024 / 1024).toFixed(2)}MB`,
        maxSize: '25MB'
      });
    }

    // Verificar tipo de archivo con m√°s formatos
    const allowedTypes = ['video/mp4', 'video/mov', 'video/avi', 'video/webm', 'video/quicktime', 'video/x-msvideo'];
    const isValidType = allowedTypes.some(type => 
      mimeType.toLowerCase().includes(type.split('/')[1]) || 
      fileName.toLowerCase().includes(type.split('/')[1])
    );

    if (!isValidType) {
      return res.status(400).json({
        success: false,
        error: 'Tipo de archivo no soportado. Use MP4, MOV, AVI o WebM.',
        receivedType: mimeType
      });
    }

    // Estimar duraci√≥n basada en tama√±o (aproximaci√≥n)
    const estimatedDuration = Math.round((fileSize / 1024 / 1024) * 2); // ~2 segundos por MB

    // Realizar an√°lisis con Gemini
    console.log('ü§ñ Analizando con Gemini...');
    const analysisResult = await analyzeVideoWithGemini(fileName, fileSize, estimatedDuration);

    // Limpiar archivo temporal
    try {
      if (videoFile.filepath && fs.existsSync(videoFile.filepath)) {
        fs.unlinkSync(videoFile.filepath);
        console.log('üóëÔ∏è Archivo temporal eliminado');
      }
    } catch (cleanupError) {
      console.warn('‚ö†Ô∏è Error limpiando archivo temporal:', cleanupError.message);
    }

    // Respuesta exitosa con m√°s informaci√≥n
    return res.status(200).json({
      success: true,
      analysis: analysisResult,
      metadata: {
        fileName,
        fileSize: `${(fileSize / 1024 / 1024).toFixed(2)}MB`,
        estimatedDuration: `${estimatedDuration}s`,
        mimeType,
        processedAt: new Date().toISOString(),
        analysisType: 'AI-powered metadata analysis'
      }
    });

  } catch (error) {
    console.error('‚ùå Error en an√°lisis:', error);
    
    // Manejar errores espec√≠ficos con m√°s detalle
    if (error.code === 'LIMIT_FILE_SIZE') {
      return res.status(413).json({
        success: false,
        error: 'Archivo demasiado grande. M√°ximo 25MB permitido.',
        maxSize: '25MB',
        suggestion: 'Intenta comprimir el video o usar una calidad menor.'
      });
    }

    if (error.code === 'LIMIT_UNEXPECTED_FILE') {
      return res.status(400).json({
        success: false,
        error: 'Formato de archivo no v√°lido.',
        supportedFormats: ['MP4', 'MOV', 'AVI', 'WebM']
      });
    }

    return res.status(500).json({
      success: false,
      error: 'Error interno del servidor.',
      suggestion: 'Intente con un archivo m√°s peque√±o o diferente formato.',
      supportedSize: 'M√°ximo 25MB'
    });
  }
}

